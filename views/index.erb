<!-- <div id="actions">
</div> -->
<% content_for :scripts do %>
<script src="/js/codemirror-2.3/lib/codemirror.js"></script>
<script src="/js/codemirror-2.3/mode/xml/xml.js"></script>
<script src="/js/codemirror-2.3/mode/markdown/markdown.js"></script>
<script src="/js/codemirror-2.3/mode/gfm/gfm.js"></script>

<script src="/js/codemirror-2.3/mode/javascript/javascript.js"></script>
<script src="/js/codemirror-2.3/mode/ruby/ruby.js"></script>
<script src="/js/codemirror-2.3/mode/shell/shell.js"></script>
<script src="/js/codemirror-2.3/mode/lua/lua.js"></script>
<script src="/js/codemirror-2.3/mode/clike/clike.js"></script>

<script src="/js/jqModal.js"></script>
<script src="/js/naughty.js"></script>

<link rel="stylesheet" href="/js/codemirror-2.3/lib/codemirror.css">
<link rel="stylesheet" href="/css/codemirror.css">
<link rel="stylesheet" href="/css/jqModal.css">
<script>
  $(function() {
    var editor = null;

    function save() {
      editor.save();

      // var title = $("#pages .selected").html();
      var title = $("#pages .selected").attr("id").replace("page_", "");
      // var content = $("#current_page").serialize();
      var content = editor.getValue();

      console.log("Saving " + title);

      ui.status("Saving page...", "pending");

      $.ajax({
        type: "PUT",
        url: "/pages/" + title,
        data: { attributes: { content: content } },
        success: function() {
          status("Page saved!", "good");
        },
        error: function(rc) {
          status("Unable to save page: " + rc.responseText, "bad");
        }
      })
    } // save();

    function edit_title() {
      var li = $("#pages li.selected");
      var txtbox = $("#title_editor");

      li.hide();
      console.log(li)
      txtbox.show().attr("value", li.html());
      li.after(txtbox);
      txtbox.focus();

      return true;
    }
    function reset_title(capture) {
      var li = $("#pages li:hidden");
      var txtbox = $("#title_editor");

      if (capture)
        li.html(txtbox.attr("value"));

      txtbox.hide();
      li.show();
    }

    function save_title() {
      reset_title(true);

      var page_id = li.attr("id").replace("page_", "");
      var title = li.html();

      ui.status("Saving page title...", "pending");

      $.ajax({
        type: "PUT",
        url: "/pages/" + page_id,
        data: { attributes: { title: title } },
        success: function() {
          status("Page title changed!", "good");
        },
        error: function(rc) {
          status("Unable to change the page's title :( " + rc.responseText, "bad");
        }
      })
    }

    $("#title_editor").keyup(function(e) {
      if ( e.which == 13 ) {
        e.preventDefault();
        save_title();
        // $(this).siblings("a:first").click();
      } else if (e.which == 27) {
        e.preventDefault();
        reset_title();
      }
    });

    function get_page() {
      if ($(this).hasClass("selected"))
        return edit_title();

      $("#page_actions").removeClass("disabled");

      $("#pages .selected").removeClass("selected");
      $(this).addClass("selected");

      ui.status("Loading page...", "pending");

      editor.save();
      // var title = $(this).html();
      var title = $(this).attr("id").replace("page_", "");
      $.ajax({
        type: "GET",
        url: "/pages/" + title + ".json",
        success: function(content) {
          // $("#current_page").html(content);
          editor.setValue(content);
          $("#preview").attr("href", "/pages/" + title + "/preview");
          $("#share").attr("href", "/pages/" + title + "/share");
        }
      });
    }

    $("#pages li").click(get_page);

    CodeMirror.keyMap.mxvt = {
      "Ctrl-1": function(cm) { mxvt.markdown.heading(cm, 1) },
      "Ctrl-2": function(cm) { mxvt.markdown.heading(cm, 2) },
      "Ctrl-3": function(cm) { mxvt.markdown.heading(cm, 3) },
      "Ctrl-4": function(cm) { mxvt.markdown.heading(cm, 4) },
      "Ctrl-S": function(cm) { save(); },
      "Ctrl-B": function(cm) { mxvt.markdown.strongify(cm) },
      "Ctrl-I": function(cm) { mxvt.markdown.emphasize(cm) },
      "Shift-Ctrl-K": function(cm) { cm.removeLine(cm.getCursor(true).line) },
      "Shift-Ctrl-D": function(cm) {
        var line_pos = cm.getCursor(true).line;
        var line_txt = cm.getLine(line_pos);
        cm.setLine(line_pos, line_txt + '\n' + line_txt)
      },
      fallthrough: ["default"]
    };

    editor = CodeMirror.fromTextArea(document.getElementById("current_page"), {
      mode: "markdown",
      lineNumbers: true,
      matchBrackets: true,
      theme: "default",
      keyMap: "mxvt",
      tabSize: 2,
      gutter: true,
      autoClearEmptyLines: false,
      lineWrapping: true
    });

    ui.editor = editor;
    ui.actions = $("#page_actions");

    $("#zoom_in").click(function() {
      $(".CodeMirror").css("font-size", parseInt($(".CodeMirror").css("font-size")) + 2);
    });
    $("#zoom_out").click(function() {
      $(".CodeMirror").css("font-size", parseInt($(".CodeMirror").css("font-size")) - 2);
    });

    $("#font_selection").change(function() {
      console.log("Font: " + $(this).find(":selected").attr("value"));
      $(".CodeMirror").css("font-family", $(this).find(":selected").attr("value"));
    });

    $("#new_page").click(function() {
      console.log("creating a page")
      ui.status("Creating a new page...", "pending");

      $.ajax({
        url: "/pages",
        type: "POST",
        success: function(page_id) {
          console.log("page created successfully")
          var new_page = "<li id=\"page_" + page_id + "\">page #" + page_id + "</li>";
          $("#pages ul").prepend(new_page);
          $("#pages li.selected").removeClass("selected");
          $("#pages ul li:first").addClass("selected").click(get_page);
          ui.editor.setValue("");
        },
        error: function(e) {
          console.log("smth bad happened")
          console.log(e)
        }
      });
    });

  }); 
</script>
<% end %>

<% content_for :title do %>
  Naughty
<% end %>

<div id="pages">
  <a href="#" id="new_page">+ start a new page</a>
  <hr />
  <input type="text" id="title_editor" hidden="hidden" />
  <ul>
    <% logged_in? && @pages.each do |p| %>
      <li id="page_<%= p.id %>"><%= p.title == "Untitled" ? "page ##{p.id}" : p.title %></li>
    <% end %>
  </ul>
</div><!--

--><div class="disabled" id="page_actions">
  <a href="#" title="Increases the font size of the editor" id="zoom_in">Zoom in</a> &bullet;
  <a href="#" title="Decreases the font size of the editor" id="zoom_out">Zoom out</a> &bullet;<!--
  --><select title="The font used in the page editor" id="font_selection">
    <option value="ProximaNova-Light" selected="selected">Proxima Nova</option>
    <option value="monospace">Monospace</option>
    <option value="Arial">Arial</option>
    <option value="Verdana">Verdana</option>
    <option value="Helvetica Neue">Helvetica Neue</option>
  </select><!--
  --><a target="Naughty - Preview" 
  title="View the current page in prettified HTML mode" 
  href="/pages/x/preview" id="preview">Pretty Mode</a> &bullet;
  <a target="Naughty" 
  title="Make a public version of this page that you can share with people" 
  href="/pages/x/share" id="share">Share this</a> &bullet;
  <a id="delete_page" class="confirm"
     data-confirmation="Are you sure you want this page to be FOREVER deleted?"
     data-confirmation-cb="delete_page"
     title="Deletes the page forever">Delete</a>
</div><textarea id="current_page">
</textarea>

<!-- Confirm Dialog -->
<div class="jqmConfirm" id="confirm">
  <div id="ex3b" class="jqmConfirmWindow">
      <div class="jqmConfirmTitle clearfix">
      <h1>Confirm your action</h1><a href="#" class="jqmClose"><em>X</em></a>
    </div>
    
    <div class="jqmConfirmContent">
    <p class="jqmConfirmMsg"></p>
    <!-- <p>Continue?</p> -->
    </div>
    
    <input type="submit" value="Cancel" />
    <input type="submit" value="Yes" />
    
  </div>
</div>